#!/usr/bin/python

from opsgenie import OpsGenie
from opsgenie.config import Configuration
from opsgenie.swagger_client import AlertApi
from opsgenie.swagger_client.models import *
from opsgenie.swagger_client.rest import ApiException
import socket
import hashlib
import os
import time
import sys
import time
import argparse

#
# CONFIGURATION
# See README for details
#
API_KEY = "YOUR_API_KEY"

# If True, this will re-alert after 4 hours of being in error state.
REALERT_AFTER_4_HOURS = False

# True if you don't want to use files for realerting
DONT_USE_FILES = False

parser = argparse.ArgumentParser( description='Triggers an opsgenie-alert' )
parser.add_argument( 'args', metavar='N', nargs='+', help='issue description' )
parser.add_argument( '--description', help='Description of the issue' )
parser.add_argument( '--dontUseFiles', action='store_true', help='True if you wish to not use files for deduping alerts' )
parser.add_argument( '--realert', action='store_true', help='True if you wish to realert after 4 hours' )
args = parser.parse_args()

#
# END CONFIGURATION
#

if API_KEY is "YOUR_API_KEY":
    print("Must specify API_KEY!")
    exit( 1 )

config = Configuration(apikey=API_KEY)
client = OpsGenie(config)

EVENT=args.args[0]
HOST=socket.gethostname()
DESCRIPTION=EVENT;
if args.description:
    DESCRIPTION=args.description
# Technically the --description is optional
if len(args.args) >= 2:
    DESCRIPTION=args.args[1]
if args.dontUseFiles:
    DONT_USE_FILES=args.dontUseFiles
if args.realert:
    REALERT_AFTER_4_HOURS=args.realert

m = hashlib.md5()
m.update( HOST + ":" + EVENT)

file = "/tmp/opsgenie-" + m.hexdigest()
if not DONT_USE_FILES and os.path.isfile( file ):
    st = os.stat( file )
    # If the alert is over 4 hours old, re-fire.
    # TODO: Consider resolving the initial alert?
    if not REALERT_AFTER_4_HOURS or time.time() - st.st_mtime < 14400:
        print("%s exists" % file)
        exit( 1 )

body = CreateAlertRequest(
    message=EVENT + " failed on " + HOST,
    description=DESCRIPTION,
    entity=HOST,
    priority='P4')

try:
    create_response = AlertApi().create_alert(body=body)

    print('request id: {}'.format(create_response.request_id))
    print('took: {}'.format(create_response.took))
    print('result: {}'.format(create_response.result))

    # TODO: Need a better way to do this...
    time.sleep(5)

    response = AlertApi().get_request_status(request_id=create_response.request_id)

    print('request id: {}'.format(response.request_id))
    print('took: {}'.format(response.took))
    # Refer to GetRequestStatusResponse for more detailed data
    print('data.alert_id: {}'.format(response.data.alert_id))
    print('data.alias: {}'.format(response.data.alias))
    print('data.integration_id: {}'.format(response.data.integration_id))
    print('data.is_success: {}'.format(response.data.is_success))
    print('data.processed_at: {}'.format(response.data.processed_at))
    print('data.action: {}'.format(response.data.action))
    print('data.status: {}'.format(response.data.status))

    if not DONT_USE_FILES:
        f = open( file, "w+" )
        f.write( format(response.data.alert_id) )
        f.close()
except ApiException as err:
    print("Exception when calling AlertApi->create_alert: %s\n" % err)
    exit( 1 )
